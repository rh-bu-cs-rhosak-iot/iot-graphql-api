type Meter {
  id: ID!
  address: String!
  latitude: Float!
  longitude: Float!
  status: String
  updated: Int
}

type MeterResultList {
  items: [Meter]!
  offset: Int
  limit: Int
  count: Int
}

type MetersStatus {
  available: Int
  occupied: Int
  outoforder: Int
  updated: Int
}

type Street{
  name: String!
  meters: MetersStatus
}

type StreetResultList {
  items: [Street]!
  offset: Int
  limit: Int
  count: Int 
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

input MeterFilter {
  id: StringInput
  address: StringInput
  latitude: StringInput
  longitude: StringInput
  and: [MeterFilter!]
  or: [MeterFilter!]
  not: MeterFilter
}

input StreetFilter {
  name: StringInput
  and: [StreetFilter!]
  or: [StreetFilter!]
  not: StreetFilter
}

input PageRequest {
  limit: Int
  offset: Int
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

enum SortDirectionEnum {
  DESC
  ASC
}

type Query {
  meters(
    filter: MeterFilter
    page: PageRequest
    orderBy: OrderByInput
  ): MeterResultList!
  meter(id: ID!): Meter
  countMeters: Int
  streets(
    filter: StreetFilter
    page: PageRequest
    orderBy: OrderByInput
  ): StreetResultList!
}